/*
 * Please do not edit this file.
 * It was generated using PAB's VML system.
 */

#ifndef _KTOPIPI_JOBPARAMS_H_RPCGEN
#define _KTOPIPI_JOBPARAMS_H_RPCGEN

#include <config.h>
#include <util/vml/types.h>
#include <util/vml/vml.h>
#include <util/enum.h>
#include <util/defines.h>
CPS_START_NAMESPACE


#include <util/vml/vml_templates.h>
class VML;
class JobParams {
public:
	 bool Encode(char *filename,char *instance);
	 bool Decode(char *filename,char *instance);
	 bool Vml(VML *vmls,char *instance);
	BfmSolverType solver;
	double mobius_scale;
	double pion_rad;
	double kaon_rad;
	int pipi_separation;
	int tstep_pipi;
	struct {
		u_int k_pi_separation_len;
		int *k_pi_separation_val;
	} k_pi_separation;
	int xyzstep_type1;
	int tstep_type12;
	   void print(const std::string &prefix ="");
	   void deep_copy(const JobParams &rhs);
};
#ifndef _USE_STDLIB
#error "Cannot generate rpc_print commands without the standard library"
#endif
template<> struct rpc_print<JobParams>{
	static void doit(JobParams const &what, const std::string &prefix="" );
};

template<> struct rpc_deepcopy<JobParams>{
	static void doit(JobParams &into, JobParams const &from);
};


/* the xdr functions */

#ifdef __cplusplus
extern "C" {
#endif

#if defined(__STDC__) || defined(__cplusplus)
extern  bool_t vml_JobParams (VML *, char *instance, JobParams*);

#else /* K&R C */
extern  bool_t vml_JobParams (VML *, char *instance, JobParams*);

#endif /* K&R C */

#ifdef __cplusplus
}
#endif
CPS_END_NAMESPACE

#endif /* !_KTOPIPI_JOBPARAMS_H_RPCGEN */
